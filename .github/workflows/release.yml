name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.os }}
    environment: APPLE_CERTIFICATE_BASE64
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: space-downloader-gui.exe
            asset_name: space-downloader-windows-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: space-downloader-gui
            asset_name: space-downloader-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.platform.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxkbcommon-dev libwayland-dev

      - name: Build release binary
        run: cargo build --release --package space-downloader-gui --target ${{ matrix.platform.target }}

      - name: Strip binary (Linux and macOS)
        if: matrix.platform.os != 'windows-latest'
        run: strip target/${{ matrix.platform.target }}/release/${{ matrix.platform.artifact_name }}

      - name: Import Code-Signing Certificates (macOS)
        if: matrix.platform.os == 'macos-latest'
        env:
          APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate from secrets
          echo -n "$APPLE_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Enable codesigning from keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Verify certificate is available
          security find-identity -v -p codesigning $KEYCHAIN_PATH

      - name: Sign Binary (macOS)
        if: matrix.platform.os == 'macos-latest'
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: |
          # Sign the main binary
          codesign --force --sign "$APPLE_SIGNING_IDENTITY" \
            --options runtime \
            --timestamp \
            --deep \
            target/${{ matrix.platform.target }}/release/${{ matrix.platform.artifact_name }}

          # Verify signature
          codesign --verify --verbose=4 target/${{ matrix.platform.target }}/release/${{ matrix.platform.artifact_name }}

          # Display signature information
          codesign -dv --verbose=4 target/${{ matrix.platform.target }}/release/${{ matrix.platform.artifact_name }}

          # Verify Gatekeeper acceptance
          spctl -a -vvv -t install target/${{ matrix.platform.target }}/release/${{ matrix.platform.artifact_name }}

      - name: Create App Bundle (macOS)
        if: matrix.platform.os == 'macos-latest'
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: |
          # Create App Bundle structure
          APP_NAME="Space Downloader.app"
          mkdir -p "$APP_NAME/Contents/MacOS"
          mkdir -p "$APP_NAME/Contents/Resources"

          # Copy main binary
          cp target/${{ matrix.platform.target }}/release/${{ matrix.platform.artifact_name }} "$APP_NAME/Contents/MacOS/"

          # Download and copy dependencies
          chmod +x scripts/download-dependencies.sh
          ./scripts/download-dependencies.sh "$APP_NAME/Contents/MacOS"

          # Create Info.plist
          cat > "$APP_NAME/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>space-downloader-gui</string>
              <key>CFBundleIdentifier</key>
              <string>com.space-downloader.app</string>
              <key>CFBundleName</key>
              <string>Space Downloader</string>
              <key>CFBundleVersion</key>
              <string>1.0.0</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0.0</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>LSMinimumSystemVersion</key>
              <string>11.0</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF

          # Sign all binaries in the app bundle
          for binary in "$APP_NAME/Contents/MacOS/yt-dlp" "$APP_NAME/Contents/MacOS/ffmpeg" "$APP_NAME/Contents/MacOS/ffprobe"; do
            if [ -f "$binary" ]; then
              echo "Signing $binary..."
              codesign --force --sign "$APPLE_SIGNING_IDENTITY" \
                --options runtime \
                --timestamp "$binary"
              codesign --verify --verbose=4 "$binary"
            fi
          done

          # Sign main executable
          codesign --force --sign "$APPLE_SIGNING_IDENTITY" \
            --options runtime \
            --timestamp "$APP_NAME/Contents/MacOS/space-downloader-gui"

          # Sign the entire app bundle
          codesign --force --sign "$APPLE_SIGNING_IDENTITY" \
            --options runtime \
            --timestamp \
            --deep "$APP_NAME"

          # Verify app bundle signature
          codesign --verify --deep --verbose=4 "$APP_NAME"
          codesign -dv --verbose=4 "$APP_NAME"

          echo "✅ App Bundle created and signed"

      - name: Bundle dependencies (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path bundle | Out-Null
          Copy-Item "target\${{ matrix.platform.target }}\release\${{ matrix.platform.artifact_name }}" "bundle\${{ matrix.platform.artifact_name }}" -Force
          ./scripts/download-dependencies.ps1 -OutputDir bundle

      - name: Create ZIP for Notarization (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          # Create ZIP with App Bundle
          zip -r notarization.zip "Space Downloader.app"

      - name: Notarize with Apple API Key (macOS)
        if: matrix.platform.os == 'macos-latest'
        env:
          APPLE_API_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
        run: |
          # Create secure temporary file for API key
          API_KEY_PATH=$RUNNER_TEMP/AuthKey_$APPLE_API_KEY_ID.p8

          # Decode and save API key
          echo "$APPLE_API_PRIVATE_KEY" | base64 --decode > "$API_KEY_PATH"
          chmod 600 "$API_KEY_PATH"

          # Submit for notarization
          echo "Submitting for notarization..."
          xcrun notarytool submit notarization.zip \
            --key "$API_KEY_PATH" \
            --key-id "$APPLE_API_KEY_ID" \
            --issuer "$APPLE_API_ISSUER_ID" \
            --wait \
            --timeout 30m

          # Clean up API key
          rm -f "$API_KEY_PATH"

          echo "✅ Notarization completed successfully"

      - name: Create DMG for distribution (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          # Create a temporary DMG directory with Applications symlink
          mkdir -p dmg-staging
          cp -R "Space Downloader.app" dmg-staging/
          ln -s /Applications dmg-staging/Applications

          # Create DMG
          hdiutil create -volname "Space Downloader" -srcfolder dmg-staging -ov -format UDZO space-downloader.dmg

          # Sign the DMG
          codesign --force --sign "$APPLE_SIGNING_IDENTITY" space-downloader.dmg

          echo "✅ DMG created and signed"
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}

      - name: Notarize DMG (macOS)
        if: matrix.platform.os == 'macos-latest'
        env:
          APPLE_API_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
        run: |
          # Create secure temporary file for API key
          API_KEY_PATH=$RUNNER_TEMP/AuthKey_$APPLE_API_KEY_ID.p8

          # Decode and save API key
          echo "$APPLE_API_PRIVATE_KEY" | base64 --decode > "$API_KEY_PATH"
          chmod 600 "$API_KEY_PATH"

          # Submit DMG for notarization
          echo "Submitting DMG for notarization..."
          xcrun notarytool submit space-downloader.dmg \
            --key "$API_KEY_PATH" \
            --key-id "$APPLE_API_KEY_ID" \
            --issuer "$APPLE_API_ISSUER_ID" \
            --wait \
            --timeout 30m

          # Clean up API key
          rm -f "$API_KEY_PATH"

          echo "✅ DMG notarization completed"

      - name: Staple notarization ticket to DMG (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          xcrun stapler staple space-downloader.dmg
          xcrun stapler validate space-downloader.dmg

          # Prepare for upload
          mkdir -p upload
          mv space-downloader.dmg upload/

          echo "✅ DMG stapled and ready for distribution"

      - name: Clean up keychain and certificates (macOS)
        if: always() && matrix.platform.os == 'macos-latest'
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12

          # Delete keychain
          security delete-keychain $KEYCHAIN_PATH || true

          # Remove certificate file
          rm -f $CERTIFICATE_PATH || true

          echo "✅ Cleaned up keychain and certificates"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.asset_name }}
          path: ${{ matrix.platform.os == 'macos-latest' && 'upload/' || 'bundle/' }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          cd artifacts
          for dir in */; do
            dirname="${dir%/}"
            cd "$dirname"
            if [ -f space-downloader-gui.exe ]; then
              # Windows: create ZIP
              zip -r "../${dirname}.zip" *
            elif [ -f space-downloader.dmg ]; then
              # macOS: DMG is already ready, just move it
              mv space-downloader.dmg "../${dirname}.dmg"
            fi
            cd ..
          done

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            artifacts/*.zip
            artifacts/*.dmg
          body: |
            ## Space Downloader ${{ steps.get_version.outputs.VERSION }}

            ### Downloads
            - **Windows (x64)**: `space-downloader-windows-x64.zip`
            - **macOS (Apple Silicon - M1/M2/M3/M4)**: `space-downloader-macos-arm64.dmg` 🆕

            ### What's Included
            - Space Downloader App Bundle (.app)
            - yt-dlp (latest)
            - ffmpeg / ffprobe (latest)
            - Fully notarized & codesigned for macOS

            ### Installation
            - **Windows**: Extract ZIP and run `.exe`
            - **macOS**:
              1. Open DMG file
              2. Drag "Space Downloader.app" to Applications folder
              3. Launch from Applications - No Gatekeeper warnings! 🚀

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
