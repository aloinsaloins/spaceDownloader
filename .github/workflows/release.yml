name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: space-downloader-gui.exe
            asset_name: space-downloader-windows-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: space-downloader-gui
            asset_name: space-downloader-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.platform.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxkbcommon-dev libwayland-dev

      - name: Build release binary
        run: cargo build --release --package space-downloader-gui --target ${{ matrix.platform.target }}

      - name: Strip binary (Linux and macOS)
        if: matrix.platform.os != 'windows-latest'
        run: strip target/${{ matrix.platform.target }}/release/${{ matrix.platform.artifact_name }}

      - name: Import Code-Signing Certificates (macOS)
        if: matrix.platform.os == 'macos-latest'
        uses: Apple-Actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Sign Binary (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          codesign --force --sign "Developer ID Application: ${{ secrets.APPLE_SIGNING_IDENTITY }}" \
            --options runtime \
            --timestamp \
            --deep \
            target/${{ matrix.platform.target }}/release/${{ matrix.platform.artifact_name }}

          codesign --verify --verbose target/${{ matrix.platform.target }}/release/${{ matrix.platform.artifact_name }}

      - name: Bundle dependencies (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          mkdir -p bundle
          cp target/${{ matrix.platform.target }}/release/${{ matrix.platform.artifact_name }} bundle/
          chmod +x scripts/download-dependencies.sh
          ./scripts/download-dependencies.sh bundle

          for binary in bundle/yt-dlp bundle/ffmpeg bundle/ffprobe; do
            if [ -f "$binary" ]; then
              codesign --force --sign "Developer ID Application: ${{ secrets.APPLE_SIGNING_IDENTITY }}" \
                --options runtime \
                --timestamp "$binary"
              codesign --verify --verbose "$binary"
            fi
          done

      - name: Create ZIP for Notarization (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          cd bundle
          zip -r ../notarization.zip .
          cd ..

      - name: Notarize with Apple API Key (macOS)
        if: matrix.platform.os == 'macos-latest'
        env:
          APPLE_API_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
        run: |
          echo "$APPLE_API_PRIVATE_KEY" | base64 --decode > AuthKey.p8
          xcrun notarytool submit notarization.zip \
            --key AuthKey.p8 \
            --key-id "${{ secrets.APPLE_API_KEY_ID }}" \
            --issuer "${{ secrets.APPLE_API_ISSUER_ID }}" \
            --wait

          echo "‚úÖ Notarization completed successfully"

      - name: Staple notarization ticket (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          xcrun stapler staple bundle/space-downloader-gui
          xcrun stapler validate bundle/space-downloader-gui

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.asset_name }}
          path: bundle/

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create ZIP archives
        run: |
          cd artifacts
          for dir in */; do
            dirname="${dir%/}"
            cd "$dirname"
            if [ -f space-downloader-gui.exe ]; then
              zip -r "../${dirname}.zip" *
            else
              chmod +x space-downloader-gui 2>/dev/null || true
              chmod +x yt-dlp 2>/dev/null || true
              chmod +x ffmpeg 2>/dev/null || true
              chmod +x ffprobe 2>/dev/null || true
              zip -r "../${dirname}.zip" *
            fi
            cd ..
          done

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            artifacts/*.zip
          body: |
            ## Space Downloader ${{ steps.get_version.outputs.VERSION }}

            ### Downloads
            - **Windows (x64)**: `space-downloader-windows-x64.zip`
            - **macOS (Apple Silicon - M1/M2/M3/M4)**: `space-downloader-macos-arm64.zip`

            ### What's Included
            - Space Downloader executable
            - yt-dlp (latest)
            - ffmpeg / ffprobe (latest)
            - Fully notarized & codesigned for macOS

            ### Installation
            - Windows: extract & run `.exe`
            - macOS: extract & run binaryÔºàGatekeeper Ë≠¶Âëä„Å™„ÅóüöÄÔºâ

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
